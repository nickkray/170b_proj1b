Nick Ray - Due to schedule conflicts, I did this segment of the project by myself but was with a partner for 1A. 

- Nachos_sem

	Just implemented P() and V() and intializers using existing semaphore implementation within Nachos. Critical areas that are wrapped in functions just need to be pointed to the atomic functions (P/V) and thus completes this segment of the project. Most difficult task was getting Nachos working correctly - actual task was straightforward.

- Nachos_lock

	For lock, we already have the implementation from 1A that deals with fine synchronization. The only addition is implementing the lock functionality. This requires recording which thread owns the current lock and a mutex (done with nachos semaphore). 

	When intializing our lock, name is blank, owner is null, and mutex is unlocked.
	For aquisition, we simply P() our semaphore and store the owner.

	For release, we check that the releaser is the correct owner (ASSERT) and undo name/mutex(V).

- Nachos_rw

	For conditional variable, it is implemented as is on slides with signal, broadcast, and wait. Within rwlock, it is based upon implementation from 1a. 

Compilation: run make
Run: ./nachos_rw etc.

Only following files were modified:

rwlock.cc
rwlock.h
synch.cc
synch.h
threadtest.cc

All is working and all tests are passing on my end. 